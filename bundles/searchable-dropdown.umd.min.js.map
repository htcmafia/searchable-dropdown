{"version":3,"sources":["../../../projects/searchable-dropdown/src/lib/searchable-dropdown.service.ts","../../../projects/searchable-dropdown/src/lib/searchable-dropdown.component.ts","../../../projects/searchable-dropdown/src/lib/searchable-dropdown.module.ts"],"names":["Injectable","args","providedIn","SearchableDropdownComponent","this","onStart","EventEmitter","onOpen","keyChange","valueChange","placeHolder","onSearch","itemsToShow","showItemList","isListLoading","addNewItem","isItemSelected","isFocusInsideComponent","isComponentClicked","prototype","ngOnInit","defaultItem","addItem","key","value","emit","onItemClick","index","searchList","_this","searchListTimeOut","clearTimeout","setTimeout","push","showAddNewItemSection","clickInside","clickout","valueFound_1","filter","item","toString","toLowerCase","handleKeyboardEvent","event","Component","selector","template","Output","Input","HostListener","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchableDropdownService {\n\n  constructor() { }\n}\n","import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-searchable-dropdown',\n  templateUrl: './searchable-dropdown.component.html',\n  styleUrls: ['./searchable-dropdown.component.scss']\n})\nexport class SearchableDropdownComponent implements OnInit {\n\n  @Output() onStart = new EventEmitter<SearchableDropdownComponent>();\n  @Output() onOpen = new EventEmitter<void>();\n\n  //Returns\n  @Input() key: number;\n  @Output() keyChange = new EventEmitter<number>();\n\n  @Input() value: string;\n  @Output() valueChange = new EventEmitter<string>();\n\n  //Placeholder\n  @Input() placeHolder: string = \"\";\n\n  //Calls on keyup\n  @Output() onSearch = new EventEmitter<string>();\n\n  @Input() defaultItem: { key, value };\n\n  itemsToShow: { key, value }[] = [];\n\n  //is item list visible\n  showItemList: boolean = false;\n  //is loading On/Off\n  isListLoading: boolean = false;\n\n  //Delay between the value entered in textfield and\n  //event emitter emittion.\n  private searchListTimeOut;\n\n  //Open/Close add new item screen\n  addNewItem: boolean = false;\n\n  private isItemSelected: boolean = false;\n  private isFocusInsideComponent = false;\n  private isComponentClicked = false;\n\n  constructor() { }\n\n  ngOnInit() {\n    if (this.defaultItem)\n      this.addItem(this.defaultItem.key, this.defaultItem.value);\n\n    this.onStart.emit(this);\n  }\n\n  //When item is selected from the list.\n  onItemClick(index: number) {\n    this.value = this.itemsToShow[index].value;\n    this.key = this.itemsToShow[index].key;\n    this.value = this.itemsToShow[index].value;\n    this.keyChange.emit(this.key);\n    this.valueChange.emit(this.value);\n    this.isItemSelected = true;\n  }\n\n  searchList() {\n    if (this.searchListTimeOut)\n      clearTimeout(this.searchListTimeOut);\n\n    this.searchListTimeOut = setTimeout(() => {\n      this.onSearch.emit(this.value);\n    }, 500);\n  }\n\n  //Manually add an item to the list.\n  addItem(key: number, value: string) {\n    this.itemsToShow.push({ key: key, value: value });\n    this.value = value;\n    this.key = key;\n    this.keyChange.emit(this.key);\n  }\n\n  //open/close add new item screne.\n  showAddNewItemSection(): void {\n    this.addNewItem = !this.addNewItem;\n  }\n\n  //if item list is in view hide it,\n  //if item list is hidden bring it in view.\n  @HostListener('click')\n  private clickInside(): void {\n\n    if (!this.showItemList) {\n      this.onOpen.emit(null);\n    }\n\n    this.showItemList = true;\n    this.isFocusInsideComponent = true;\n    this.isComponentClicked = true;\n    if (this.isItemSelected) {\n      this.isItemSelected = false;\n      //Force system to think the click was made outside.\n      this.isFocusInsideComponent = false;\n      this.clickout();\n    }\n  }\n\n  //Close when click outside the component\n  @HostListener('document:click')\n  private clickout(): void {\n    if (!this.isFocusInsideComponent && this.isComponentClicked) {\n\n      this.showItemList = false;\n      // do the heavy process\n      this.isComponentClicked = false;\n\n      let valueFound: boolean = false;\n      let currentItem: string;\n      this.itemsToShow.filter(item => {\n        if (this.value != null) {\n          currentItem = item.value;\n          if (currentItem.toString().toLowerCase() == this.value.toString().toLowerCase()) {\n            this.value = item.value;\n            this.key = item.key;\n            this.value = item.value;\n            this.keyChange.emit(this.key);\n            this.valueChange.emit(this.value);\n            valueFound = true;\n            return;\n          }\n        }\n      });\n      if (!valueFound) {\n        this.value = \"\";\n      }\n    }\n    this.isFocusInsideComponent = false;\n  }\n\n\n  //Close on Enter key\n  @HostListener('window:keyup.enter', ['$event'])\n  private handleKeyboardEvent(event: KeyboardEvent) {\n    this.showItemList = false;\n    // do the heavy process\n    this.isComponentClicked = false;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SearchableDropdownComponent } from './searchable-dropdown.component';\n\n\n\n@NgModule({\n  declarations: [SearchableDropdownComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  exports: [\n    SearchableDropdownComponent,\n    CommonModule,\n    FormsModule,\n  ]\n})\nexport class SearchableDropdownModule { }\n"]}